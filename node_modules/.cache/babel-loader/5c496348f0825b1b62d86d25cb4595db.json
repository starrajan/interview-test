{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n/* eslint-disable */\n\n/********************************************************************************\n *   Binance Chain Ledger App Interface\n *   (c) 2018-2019 Binance\n *   (c) 2018 ZondaX GmbH\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *******************************************************************************\n */\n\n\nvar DEFAULT_LEDGER_INTERACTIVE_TIMEOUT = 50000;\nvar DEFAULT_LEDGER_NONINTERACTIVE_TIMEOUT = 3000;\nvar CLA = 0xbc;\nvar SCRAMBLE_KEY = \"CSM\";\nvar ACCEPT_STATUSES = [0x9000]; // throw if not\n\nvar CHUNK_SIZE = 250;\nvar INS_GET_VERSION = 0x00;\nvar INS_PUBLIC_KEY_SECP256K1 = 0x01;\nvar INS_SIGN_SECP256K1 = 0x02;\nvar INS_SHOW_ADDR_SECP256K1 = 0x03; // const INS_GET_ADDR_SECP256K1 = 0x04\n// The general structure of commands and responses is as follows:\n// #### Commands\n// | Field   | Type     | Content                | Note |\n// |:------- |:-------- |:---------------------- | ---- |\n// | CLA     | byte (1) | Application Identifier | 0xBC |\n// | INS     | byte (1) | Instruction ID         |      |\n// | P1      | byte (1) | Parameter 1            |      |\n// | P2      | byte (1) | Parameter 2            |      |\n// | L       | byte (1) | Bytes in payload       |      |\n// | PAYLOAD | byte (L) | Payload                |      |\n// #### Response\n// | Field   | Type     | Content     | Note                     |\n// | ------- | -------- | ----------- | ------------------------ |\n// | ANSWER  | byte (?) | Answer      | depends on the command   |\n// | SW1-SW2 | byte (2) | Return code | see list of return codes |\n\n/**\n * Ledger app interface.\n * @static\n */\n\nvar LedgerApp = /*#__PURE__*/function () {\n  /**\n   * Constructs a new LedgerApp.\n   * @param {Transport} transport Ledger Transport, a subclass of ledgerjs Transport.\n   * @param {Number} interactiveTimeout The interactive (user input) timeout in ms. Default 45s.\n   * @param {Number} nonInteractiveTimeout The non-interactive timeout in ms. Default 3s.\n   */\n  function LedgerApp(transport) {\n    var interactiveTimeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_LEDGER_INTERACTIVE_TIMEOUT;\n    var nonInteractiveTimeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_LEDGER_NONINTERACTIVE_TIMEOUT;\n    (0, _classCallCheck2[\"default\"])(this, LedgerApp);\n    (0, _defineProperty2[\"default\"])(this, \"_transport\", void 0);\n    (0, _defineProperty2[\"default\"])(this, \"_interactiveTimeout\", void 0);\n    (0, _defineProperty2[\"default\"])(this, \"_nonInteractiveTimeout\", void 0);\n\n    if (!transport || !transport.send) {\n      throw new Error(\"LedgerApp expected a Transport\");\n    }\n\n    this._transport = transport;\n    this._interactiveTimeout = interactiveTimeout;\n    this._nonInteractiveTimeout = nonInteractiveTimeout;\n\n    this._transport.setScrambleKey(SCRAMBLE_KEY);\n  }\n\n  (0, _createClass2[\"default\"])(LedgerApp, [{\n    key: \"_serialize\",\n    value: function _serialize() {\n      var cla = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : CLA;\n      var ins = arguments.length > 1 ? arguments[1] : undefined;\n      var p1 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var p2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      var data = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n      var size = 5;\n\n      if (data != null) {\n        if (data.length > 255) {\n          throw new Error(\"maximum data size = 255\");\n        }\n\n        size += data.length;\n      }\n\n      var buffer = Buffer.alloc(size);\n      buffer[0] = cla;\n      buffer[1] = ins;\n      buffer[2] = p1;\n      buffer[3] = p2;\n      buffer[4] = 0;\n\n      if (data != null) {\n        buffer[4] = data.length;\n        buffer.set(data, 5);\n      }\n\n      return buffer;\n    }\n  }, {\n    key: \"_serializeHRP\",\n    value: function _serializeHRP(hrp) {\n      if (hrp == null || hrp.length < 3 || hrp.length > 83) {\n        throw new Error(\"Invalid HRP\");\n      }\n\n      var buf = Buffer.alloc(1 + hrp.length);\n      buf.writeUInt8(hrp.length, 0);\n      buf.write(hrp, 1);\n      return buf;\n    }\n  }, {\n    key: \"_serializeHDPath\",\n    value: function _serializeHDPath(path) {\n      if (path == null || path.length < 3) {\n        throw new Error(\"Invalid path.\");\n      }\n\n      if (path.length > 10) {\n        throw new Error(\"Invalid path. Length should be <= 10\");\n      }\n\n      var buf = Buffer.alloc(1 + 4 * path.length);\n      buf.writeUInt8(path.length, 0);\n\n      for (var i = 0; i < path.length; i++) {\n        var v = path[i];\n\n        if (i < 3) {\n          v |= 0x80000000; // Harden\n        }\n\n        buf.writeInt32LE(v, 1 + i * 4);\n      }\n\n      return buf;\n    }\n  }, {\n    key: \"_errorMessage\",\n    value: function _errorMessage(code) {\n      switch (code) {\n        case 1:\n          return \"U2F: Unknown\";\n\n        case 2:\n          return \"U2F: Bad request\";\n\n        case 3:\n          return \"U2F: Configuration unsupported\";\n\n        case 4:\n          return \"U2F: Device Ineligible\";\n\n        case 5:\n          return \"U2F: Timeout\";\n\n        case 14:\n          return \"Timeout\";\n\n        case 0x9000:\n          return \"No errors\";\n\n        case 0x9001:\n          return \"Device is busy\";\n\n        case 0x6400:\n          return \"Execution Error\";\n\n        case 0x6700:\n          return \"Wrong Length\";\n\n        case 0x6982:\n          return \"Empty Buffer\";\n\n        case 0x6983:\n          return \"Output buffer too small\";\n\n        case 0x6984:\n          return \"Data is invalid\";\n\n        case 0x6985:\n          return \"Conditions not satisfied\";\n\n        case 0x6986:\n          return \"Transaction rejected\";\n\n        case 0x6a80:\n          return \"Bad key handle\";\n\n        case 0x6b00:\n          return \"Invalid P1/P2\";\n\n        case 0x6d00:\n          return \"Instruction not supported\";\n\n        case 0x6e00:\n          return \"The app does not seem to be open\";\n\n        case 0x6f00:\n          return \"Unknown error\";\n\n        case 0x6f01:\n          return \"Sign/verify error\";\n\n        default:\n          return \"Unknown error code\";\n      }\n    }\n    /* GET_VERSION */\n    // #### Payload\n    // | Field | Type     | Content                | Expected |\n    // | ----- | -------- | ---------------------- | -------- |\n    // | CLA   | byte (1) | Application Identifier | 0xBC     |\n    // | INS   | byte (1) | Instruction ID         | 0x00     |\n    // | P1    | byte (1) | Parameter 1            | ignored  |\n    // | P2    | byte (1) | Parameter 2            | ignored  |\n    // | L     | byte (1) | Bytes in payload       | 0        |\n    // #### Response\n    // | Field   | Type     | Content       | Note                            |\n    // | ------- | -------- | ------------- | ------------------------------- |\n    // | CLA     | byte (1) | Test Mode     | 0xFF means test mode is enabled |\n    // | MAJOR   | byte (1) | Version Major |                                 |\n    // | MINOR   | byte (1) | Version Minor |                                 |\n    // | PATCH   | byte (1) | Version Patch |                                 |\n    // | LOCKED  | byte (1) | Device Locked | boolean                         |\n    // | SW1-SW2 | byte (2) | Return code   | see list of return codes        |\n\n    /**\n     * Gets the version of the Ledger app that is currently open on the device.\n     * @throws Will throw Error if a transport error occurs, or if the firmware app is not open.\n     */\n\n  }, {\n    key: \"getVersion\",\n    value: function () {\n      var _getVersion = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee() {\n        var result, apduResponse, returnCode, statusCode, statusText, message, stack;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                result = {};\n                _context.prev = 1;\n\n                this._transport.setExchangeTimeout(this._nonInteractiveTimeout);\n\n                _context.next = 5;\n                return this._transport.send(CLA, INS_GET_VERSION, 0, 0, Buffer.alloc(0), ACCEPT_STATUSES);\n\n              case 5:\n                apduResponse = _context.sent;\n\n                if (Buffer.isBuffer(apduResponse)) {\n                  _context.next = 8;\n                  break;\n                }\n\n                throw new Error(\"expected apduResponse to be Buffer\");\n\n              case 8:\n                returnCode = apduResponse.slice(-2);\n                result[\"test_mode\"] = apduResponse[0] !== 0;\n                result[\"major\"] = apduResponse[1];\n                result[\"minor\"] = apduResponse[2];\n                result[\"patch\"] = apduResponse[3];\n                result[\"device_locked\"] = apduResponse[4] === 1;\n                result[\"return_code\"] = returnCode[0] * 256 + returnCode[1];\n                result[\"error_message\"] = this._errorMessage(result[\"return_code\"]);\n                _context.next = 23;\n                break;\n\n              case 18:\n                _context.prev = 18;\n                _context.t0 = _context[\"catch\"](1);\n                statusCode = _context.t0.statusCode, statusText = _context.t0.statusText, message = _context.t0.message, stack = _context.t0.stack;\n                console.warn(\"Ledger getVersion error:\", this._errorMessage(statusCode), message, statusText, stack);\n                throw _context.t0;\n\n              case 23:\n                return _context.abrupt(\"return\", result);\n\n              case 24:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 18]]);\n      }));\n\n      function getVersion() {\n        return _getVersion.apply(this, arguments);\n      }\n\n      return getVersion;\n    }()\n    /* PUBLIC_KEY_SECP256K1 */\n    // #### Payload\n    // | Field | Type     | Content                 | Expected |\n    // | ----- | -------- | ----------------------  | -------- |\n    // | CLA   | byte (1) | Application Identifier  | 0xBC     |\n    // | INS   | byte (1) | Instruction ID          | 0x01     |\n    // | P1    | byte (1) | Parameter 1             | ignored  |\n    // | P2    | byte (1) | Parameter 2             | ignored  |\n    // | L     | byte (1) | Bytes in payload        | (depends) |\n    // | PL    | byte (1) | Derivation Path Length  | 3<=PL<=10 |\n    // | Path[0] | byte (4) | Derivation Path Data    | 44 |\n    // | Path[1] | byte (4) | Derivation Path Data    | 118 |\n    // | ..  | byte (4) | Derivation Path Data    |  |\n    // | Path[PL-1]  | byte (4) | Derivation Path Data    |  |\n    // First three items in the derivation path will be hardened automatically hardened\n    // #### Response\n    // | Field   | Type      | Content       | Note                            |\n    // | ------- | --------- | ------------- | ------------------------------- |\n    // | PK      | byte (65) | Public Key    |  |\n    // | SW1-SW2 | byte (2)  | Return code   | see list of return codes        |\n\n    /**\n     * Gets the public key from the Ledger app that is currently open on the device.\n     * @param {array} hdPath The HD path to use to get the public key. Default is [44, 714, 0, 0, 0]\n     * @throws Will throw Error if a transport error occurs, or if the firmware app is not open.\n     */\n\n  }, {\n    key: \"publicKeySecp256k1\",\n    value: function () {\n      var _publicKeySecp256k = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n        var hdPath,\n            result,\n            apduResponse,\n            returnCode,\n            statusCode,\n            statusText,\n            message,\n            stack,\n            _args2 = arguments;\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                hdPath = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : [44, 714, 0, 0, 0];\n                result = {};\n                _context2.prev = 2;\n\n                this._transport.setExchangeTimeout(this._nonInteractiveTimeout);\n\n                _context2.next = 6;\n                return this._transport.send(CLA, INS_PUBLIC_KEY_SECP256K1, 0, 0, this._serializeHDPath(hdPath), ACCEPT_STATUSES);\n\n              case 6:\n                apduResponse = _context2.sent;\n\n                if (Buffer.isBuffer(apduResponse)) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                throw new Error(\"expected apduResponse to be Buffer\");\n\n              case 9:\n                returnCode = apduResponse.slice(-2);\n                result[\"pk\"] = apduResponse.slice(0, 1 + 64);\n                result[\"return_code\"] = returnCode[0] * 256 + returnCode[1];\n                result[\"error_message\"] = this._errorMessage(result[\"return_code\"]);\n                _context2.next = 20;\n                break;\n\n              case 15:\n                _context2.prev = 15;\n                _context2.t0 = _context2[\"catch\"](2);\n                statusCode = _context2.t0.statusCode, statusText = _context2.t0.statusText, message = _context2.t0.message, stack = _context2.t0.stack;\n                console.warn(\"Ledger publicKeySecp256k1 error:\", this._errorMessage(statusCode), message, statusText, stack);\n                throw _context2.t0;\n\n              case 20:\n                return _context2.abrupt(\"return\", result);\n\n              case 21:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[2, 15]]);\n      }));\n\n      function publicKeySecp256k1() {\n        return _publicKeySecp256k.apply(this, arguments);\n      }\n\n      return publicKeySecp256k1;\n    }()\n    /* SIGN_SECP256K1 */\n    // #### Payload\n    // | Field | Type     | Content                | Expected |\n    // | ----- | -------- | ---------------------- | -------- |\n    // | CLA   | byte (1) | Application Identifier | 0xBC     |\n    // | INS   | byte (1) | Instruction ID         | 0x02     |\n    // | P1    | byte (1) | Packet Current Index   |   |\n    // | P2    | byte (1) | Packet Total Count     |\n    //   |\n    // | L     | byte (1) | Bytes in payload       | (depends)        |\n    // The first packet/chunk includes only the derivation path\n    // All other packets/chunks should contain message to sign\n    // *First Packet*\n    // | Field | Type     | Content                | Expected |\n    // | ----- | -------- | ---------------------- | -------- |\n    // | PL    | byte (1) | Derivation Path Length  | 3<=PL<=10 |\n    // | Path[0] | byte (4) | Derivation Path Data    | 44 |\n    // | Path[1] | byte (4) | Derivation Path Data    | 118 |\n    // | ..  | byte (4) | Derivation Path Data    |  |\n    // | Path[PL-1]  | byte (4) | Derivation Path Data    |  |\n    // | Message | bytes... | Message to Sign | |\n    // *Other Chunks/Packets*\n    // | Field | Type     | Content                | Expected |\n    // | ----- | -------- | ---------------------- | -------- |\n    // | Message | bytes... | Message to Sign | |\n    // #### Response\n    // | Field   | Type      | Content       | Note                            |\n    // | ------- | --------- | ------------- | ------------------------------- |\n    // | SIG     | byte (~71) | Signature     | DER encoded (length prefixed parts) |\n    // | SW1-SW2 | byte (2)  | Return code   | see list of return codes        |\n\n  }, {\n    key: \"_signGetChunks\",\n    value: function _signGetChunks(data, hdPath) {\n      var chunks = [];\n      chunks.push(this._serializeHDPath(hdPath));\n      var buffer = Buffer.from(data);\n\n      for (var i = 0; i < buffer.length; i += CHUNK_SIZE) {\n        var end = i + CHUNK_SIZE;\n\n        if (i > buffer.length) {\n          end = buffer.length;\n        }\n\n        chunks.push(buffer.slice(i, end));\n      }\n\n      return chunks;\n    }\n  }, {\n    key: \"_signSendChunk\",\n    value: function () {\n      var _signSendChunk2 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(chunkIdx, chunksCount, chunk) {\n        var result, apduResponse, returnCode, statusCode, statusText, message, stack;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                result = {};\n                _context3.prev = 1;\n                _context3.next = 4;\n                return this._transport.send(CLA, INS_SIGN_SECP256K1, chunkIdx, chunksCount, chunk);\n\n              case 4:\n                apduResponse = _context3.sent;\n\n                if (Buffer.isBuffer(apduResponse)) {\n                  _context3.next = 7;\n                  break;\n                }\n\n                throw new Error(\"expected apduResponse to be Buffer\");\n\n              case 7:\n                returnCode = apduResponse.slice(-2);\n                result[\"return_code\"] = returnCode[0] * 256 + returnCode[1];\n                result[\"error_message\"] = this._errorMessage(result[\"return_code\"]);\n                result[\"signature\"] = null;\n\n                if (apduResponse.length > 2) {\n                  result[\"signature\"] = apduResponse.slice(0, apduResponse.length - 2);\n                }\n\n                _context3.next = 19;\n                break;\n\n              case 14:\n                _context3.prev = 14;\n                _context3.t0 = _context3[\"catch\"](1);\n                statusCode = _context3.t0.statusCode, statusText = _context3.t0.statusText, message = _context3.t0.message, stack = _context3.t0.stack;\n                console.warn(\"Ledger signSendChunk error:\", this._errorMessage(statusCode), message, statusText, stack);\n                throw _context3.t0;\n\n              case 19:\n                return _context3.abrupt(\"return\", result);\n\n              case 20:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[1, 14]]);\n      }));\n\n      function _signSendChunk(_x, _x2, _x3) {\n        return _signSendChunk2.apply(this, arguments);\n      }\n\n      return _signSendChunk;\n    }()\n    /**\n     * Sends a transaction sign doc to the Ledger app to be signed.\n     * @param {Buffer} signBytes The TX sign doc bytes to sign\n     * @param {array} hdPath The HD path to use to get the public key. Default is [44, 714, 0, 0, 0]\n     * @throws Will throw Error if a transport error occurs, or if the firmware app is not open.\n     */\n\n  }, {\n    key: \"signSecp256k1\",\n    value: function () {\n      var _signSecp256k = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(signBytes) {\n        var hdPath,\n            result,\n            chunks,\n            response,\n            statusCode,\n            statusText,\n            message,\n            stack,\n            i,\n            _statusCode,\n            _statusText,\n            _message,\n            _stack,\n            signature,\n            rOffset,\n            rLen,\n            sLen,\n            sOffset,\n            sigR,\n            sigS,\n            _args4 = arguments;\n\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                hdPath = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : [44, 714, 0, 0, 0];\n                result = {};\n                chunks = this._signGetChunks(signBytes, hdPath); // _signSendChunk doesn't throw, it catches exceptions itself. no need for try/catch\n\n                _context4.prev = 3;\n\n                if (chunks.length <= 1) {\n                  this._transport.setExchangeTimeout(this._interactiveTimeout);\n                } else {\n                  // more to come, non-interactive\n                  this._transport.setExchangeTimeout(this._nonInteractiveTimeout);\n                }\n\n                _context4.next = 7;\n                return this._signSendChunk(1, chunks.length, chunks[0]);\n\n              case 7:\n                response = _context4.sent;\n                result[\"return_code\"] = response.return_code;\n                result[\"error_message\"] = response.error_message;\n                result[\"signature\"] = null;\n                _context4.next = 18;\n                break;\n\n              case 13:\n                _context4.prev = 13;\n                _context4.t0 = _context4[\"catch\"](3);\n                statusCode = _context4.t0.statusCode, statusText = _context4.t0.statusText, message = _context4.t0.message, stack = _context4.t0.stack;\n                console.warn(\"Ledger signSecp256k1 error (chunk 1):\", this._errorMessage(statusCode), message, statusText, stack);\n                throw _context4.t0;\n\n              case 18:\n                if (!(response.return_code === 0x9000)) {\n                  _context4.next = 60;\n                  break;\n                }\n\n                i = 1;\n\n              case 20:\n                if (!(i < chunks.length)) {\n                  _context4.next = 40;\n                  break;\n                }\n\n                _context4.prev = 21;\n\n                if (i === chunks.length - 1) {\n                  // last?\n                  this._transport.setExchangeTimeout(this._interactiveTimeout);\n                }\n\n                _context4.next = 25;\n                return this._signSendChunk(1 + i, chunks.length, chunks[i]);\n\n              case 25:\n                response = _context4.sent;\n                result[\"return_code\"] = response.return_code;\n                result[\"error_message\"] = response.error_message;\n                _context4.next = 35;\n                break;\n\n              case 30:\n                _context4.prev = 30;\n                _context4.t1 = _context4[\"catch\"](21);\n                _statusCode = _context4.t1.statusCode, _statusText = _context4.t1.statusText, _message = _context4.t1.message, _stack = _context4.t1.stack;\n                console.warn(\"Ledger signSecp256k1 error (chunk 2):\", this._errorMessage(_statusCode), _message, _statusText, _stack);\n                throw _context4.t1;\n\n              case 35:\n                if (!(response.return_code !== 0x9000)) {\n                  _context4.next = 37;\n                  break;\n                }\n\n                return _context4.abrupt(\"break\", 40);\n\n              case 37:\n                i++;\n                _context4.next = 20;\n                break;\n\n              case 40:\n                result[\"return_code\"] = response.return_code;\n                result[\"error_message\"] = response.error_message; // Ledger has encoded the sig in ASN1 DER format, but we need a 64-byte buffer of <r,s>\n                // DER-encoded signature from Ledger:\n                // 0 0x30: a header byte indicating a compound structure\n                // 1 A 1-byte length descriptor for all what follows (ignore)\n                // 2 0x02: a header byte indicating an integer\n                // 3 A 1-byte length descriptor for the R value\n                // 4 The R coordinate, as a big-endian integer\n                //   0x02: a header byte indicating an integer\n                //   A 1-byte length descriptor for the S value\n                //   The S coordinate, as a big-endian integer\n                //  = 7 bytes of overhead\n\n                signature = response.signature;\n\n                if (!(!signature || !signature.length)) {\n                  _context4.next = 45;\n                  break;\n                }\n\n                throw new Error(\"Ledger assertion failed: Expected a non-empty signature from the device\");\n\n              case 45:\n                if (!(signature[0] !== 0x30)) {\n                  _context4.next = 47;\n                  break;\n                }\n\n                throw new Error(\"Ledger assertion failed: Expected a signature header of 0x30\");\n\n              case 47:\n                // decode DER string format\n                rOffset = 4;\n                rLen = signature[3];\n                sLen = signature[4 + rLen + 1]; // skip over following 0x02 type prefix for s\n\n                sOffset = signature.length - sLen; // we can safely ignore the first byte in the 33 bytes cases\n\n                if (rLen === 33) {\n                  rOffset++; // chop off 0x00 padding\n\n                  rLen--;\n                }\n\n                if (sLen === 33) sOffset++; // as above\n\n                sigR = signature.slice(rOffset, rOffset + rLen); // skip e.g. 3045022100 and pad\n\n                sigS = signature.slice(sOffset);\n                signature = result[\"signature\"] = Buffer.concat([sigR, sigS]);\n\n                if (!(signature.length !== 64)) {\n                  _context4.next = 58;\n                  break;\n                }\n\n                throw new Error(\"Ledger assertion failed: incorrect signature length \".concat(signature.length));\n\n              case 58:\n                _context4.next = 61;\n                break;\n\n              case 60:\n                throw new Error(\"Unable to sign the transaction. Return code \" + response.return_code);\n\n              case 61:\n                return _context4.abrupt(\"return\", result);\n\n              case 62:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[3, 13], [21, 30]]);\n      }));\n\n      function signSecp256k1(_x4) {\n        return _signSecp256k.apply(this, arguments);\n      }\n\n      return signSecp256k1;\n    }()\n    /* INS_SHOW_ADDR_SECP256K1 */\n    // #### Command\n    // | Field      | Type           | Content                | Expected       |\n    // | ---------- | -------------- | ---------------------- | -------------- |\n    // | CLA        | byte (1)       | Application Identifier | 0xBC           |\n    // | INS        | byte (1)       | Instruction ID         | 0x03           |\n    // | P1         | byte (1)       | Parameter 1            | ignored        |\n    // | P2         | byte (1)       | Parameter 2            | ignored        |\n    // | L          | byte (1)       | Bytes in payload       | (depends)      |\n    // | HRP_LEN    | byte(1)        | Bech32 HRP Length      | 1<=HRP_LEN<=83 |\n    // | HRP        | byte (HRP_LEN) | Bech32 HRP             |                |\n    // | PL         | byte (1)       | Derivation Path Length | 3<=PL<=5       |\n    // | Path[0]    | byte (4)       | Derivation Path Data   | 44             |\n    // | Path[1]    | byte (4)       | Derivation Path Data   | 714            |\n    // | ..         | byte (4)       | Derivation Path Data   |                |\n    // | Path[PL-1] | byte (4)       | Derivation Path Data   |                |\n    // First three items in the derivation path will be automatically hardened\n\n    /**\n     * Shows the user's address for the given HD path on the device display.\n     * @param {string} hrp The bech32 human-readable prefix\n     * @param {array} hdPath The HD path to use to get the public key. Default is [44, 714, 0, 0, 0]\n     * @throws Will throw Error if a transport error occurs, or if the firmware app is not open.\n     */\n\n  }, {\n    key: \"showAddress\",\n    value: function () {\n      var _showAddress = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee5() {\n        var hrp,\n            hdPath,\n            result,\n            data,\n            apduResponse,\n            returnCode,\n            _args5 = arguments;\n        return _regenerator[\"default\"].wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                hrp = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : \"bnb\";\n                hdPath = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : [44, 714, 0, 0, 0];\n                result = {};\n                data = Buffer.concat([this._serializeHRP(hrp), this._serializeHDPath(hdPath)]);\n\n                this._transport.setExchangeTimeout(this._interactiveTimeout);\n\n                _context5.next = 7;\n                return this._transport.send(CLA, INS_SHOW_ADDR_SECP256K1, 0, 0, data, ACCEPT_STATUSES);\n\n              case 7:\n                apduResponse = _context5.sent;\n\n                if (Buffer.isBuffer(apduResponse)) {\n                  _context5.next = 10;\n                  break;\n                }\n\n                throw new Error(\"expected apduResponse to be Buffer\");\n\n              case 10:\n                returnCode = apduResponse.slice(-2);\n                result[\"return_code\"] = returnCode[0] * 256 + returnCode[1];\n                result[\"error_message\"] = this._errorMessage(result[\"return_code\"]);\n\n                if (result.return_code === 0x6a80) {\n                  result[\"error_message\"] = apduResponse.slice(0, apduResponse.length - 2).toString(\"ascii\");\n                }\n\n                return _context5.abrupt(\"return\", result);\n\n              case 15:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function showAddress() {\n        return _showAddress.apply(this, arguments);\n      }\n\n      return showAddress;\n    }() // convenience aliases\n\n    /**\n     * Gets the public key from the Ledger app that is currently open on the device.\n     * @param {array} hdPath The HD path to use to get the public key. Default is [44, 714, 0, 0, 0]\n     * @throws Will throw Error if a transport error occurs, or if the firmware app is not open.\n     */\n\n  }, {\n    key: \"getPublicKey\",\n    value: function getPublicKey(hdPath) {\n      return this.publicKeySecp256k1(hdPath);\n    }\n    /**\n     * Sends a transaction sign doc to the Ledger app to be signed.\n     * @param {Buffer} signBytes The TX sign doc bytes to sign\n     * @param {array} hdPath The HD path to use to get the public key. Default is [44, 714, 0, 0, 0]\n     * @throws Will throw Error if a transport error occurs, or if the firmware app is not open.\n     */\n\n  }, {\n    key: \"sign\",\n    value: function sign(signBytes, hdPath) {\n      return this.signSecp256k1(signBytes, hdPath);\n    }\n  }]);\n  return LedgerApp;\n}();\n\nmodule.exports = LedgerApp;\nvar _default = LedgerApp;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/home/rajan/Desktop/test-bepswap/node_modules/@binance-chain/javascript-sdk/lib/ledger/ledger-app.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","_regenerator","_asyncToGenerator2","_classCallCheck2","_createClass2","_defineProperty2","DEFAULT_LEDGER_INTERACTIVE_TIMEOUT","DEFAULT_LEDGER_NONINTERACTIVE_TIMEOUT","CLA","SCRAMBLE_KEY","ACCEPT_STATUSES","CHUNK_SIZE","INS_GET_VERSION","INS_PUBLIC_KEY_SECP256K1","INS_SIGN_SECP256K1","INS_SHOW_ADDR_SECP256K1","LedgerApp","transport","interactiveTimeout","arguments","length","undefined","nonInteractiveTimeout","send","Error","_transport","_interactiveTimeout","_nonInteractiveTimeout","setScrambleKey","key","_serialize","cla","ins","p1","p2","data","size","buffer","Buffer","alloc","set","_serializeHRP","hrp","buf","writeUInt8","write","_serializeHDPath","path","i","v","writeInt32LE","_errorMessage","code","_getVersion","mark","_callee","result","apduResponse","returnCode","statusCode","statusText","message","stack","wrap","_callee$","_context","prev","next","setExchangeTimeout","sent","isBuffer","slice","t0","console","warn","abrupt","stop","getVersion","apply","_publicKeySecp256k","_callee2","hdPath","_args2","_callee2$","_context2","publicKeySecp256k1","_signGetChunks","chunks","push","from","end","_signSendChunk2","_callee3","chunkIdx","chunksCount","chunk","_callee3$","_context3","_signSendChunk","_x","_x2","_x3","_signSecp256k","_callee4","signBytes","response","_statusCode","_statusText","_message","_stack","signature","rOffset","rLen","sLen","sOffset","sigR","sigS","_args4","_callee4$","_context4","return_code","error_message","t1","concat","signSecp256k1","_x4","_showAddress","_callee5","_args5","_callee5$","_context5","toString","showAddress","getPublicKey","sign","module","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\n/* eslint-disable */\n\n/********************************************************************************\n *   Binance Chain Ledger App Interface\n *   (c) 2018-2019 Binance\n *   (c) 2018 ZondaX GmbH\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *******************************************************************************\n */\nvar DEFAULT_LEDGER_INTERACTIVE_TIMEOUT = 50000;\nvar DEFAULT_LEDGER_NONINTERACTIVE_TIMEOUT = 3000;\nvar CLA = 0xbc;\nvar SCRAMBLE_KEY = \"CSM\";\nvar ACCEPT_STATUSES = [0x9000]; // throw if not\n\nvar CHUNK_SIZE = 250;\nvar INS_GET_VERSION = 0x00;\nvar INS_PUBLIC_KEY_SECP256K1 = 0x01;\nvar INS_SIGN_SECP256K1 = 0x02;\nvar INS_SHOW_ADDR_SECP256K1 = 0x03; // const INS_GET_ADDR_SECP256K1 = 0x04\n\n// The general structure of commands and responses is as follows:\n// #### Commands\n// | Field   | Type     | Content                | Note |\n// |:------- |:-------- |:---------------------- | ---- |\n// | CLA     | byte (1) | Application Identifier | 0xBC |\n// | INS     | byte (1) | Instruction ID         |      |\n// | P1      | byte (1) | Parameter 1            |      |\n// | P2      | byte (1) | Parameter 2            |      |\n// | L       | byte (1) | Bytes in payload       |      |\n// | PAYLOAD | byte (L) | Payload                |      |\n// #### Response\n// | Field   | Type     | Content     | Note                     |\n// | ------- | -------- | ----------- | ------------------------ |\n// | ANSWER  | byte (?) | Answer      | depends on the command   |\n// | SW1-SW2 | byte (2) | Return code | see list of return codes |\n\n/**\n * Ledger app interface.\n * @static\n */\nvar LedgerApp = /*#__PURE__*/function () {\n  /**\n   * Constructs a new LedgerApp.\n   * @param {Transport} transport Ledger Transport, a subclass of ledgerjs Transport.\n   * @param {Number} interactiveTimeout The interactive (user input) timeout in ms. Default 45s.\n   * @param {Number} nonInteractiveTimeout The non-interactive timeout in ms. Default 3s.\n   */\n  function LedgerApp(transport) {\n    var interactiveTimeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_LEDGER_INTERACTIVE_TIMEOUT;\n    var nonInteractiveTimeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_LEDGER_NONINTERACTIVE_TIMEOUT;\n    (0, _classCallCheck2[\"default\"])(this, LedgerApp);\n    (0, _defineProperty2[\"default\"])(this, \"_transport\", void 0);\n    (0, _defineProperty2[\"default\"])(this, \"_interactiveTimeout\", void 0);\n    (0, _defineProperty2[\"default\"])(this, \"_nonInteractiveTimeout\", void 0);\n\n    if (!transport || !transport.send) {\n      throw new Error(\"LedgerApp expected a Transport\");\n    }\n\n    this._transport = transport;\n    this._interactiveTimeout = interactiveTimeout;\n    this._nonInteractiveTimeout = nonInteractiveTimeout;\n\n    this._transport.setScrambleKey(SCRAMBLE_KEY);\n  }\n\n  (0, _createClass2[\"default\"])(LedgerApp, [{\n    key: \"_serialize\",\n    value: function _serialize() {\n      var cla = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : CLA;\n      var ins = arguments.length > 1 ? arguments[1] : undefined;\n      var p1 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var p2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      var data = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n      var size = 5;\n\n      if (data != null) {\n        if (data.length > 255) {\n          throw new Error(\"maximum data size = 255\");\n        }\n\n        size += data.length;\n      }\n\n      var buffer = Buffer.alloc(size);\n      buffer[0] = cla;\n      buffer[1] = ins;\n      buffer[2] = p1;\n      buffer[3] = p2;\n      buffer[4] = 0;\n\n      if (data != null) {\n        buffer[4] = data.length;\n        buffer.set(data, 5);\n      }\n\n      return buffer;\n    }\n  }, {\n    key: \"_serializeHRP\",\n    value: function _serializeHRP(hrp) {\n      if (hrp == null || hrp.length < 3 || hrp.length > 83) {\n        throw new Error(\"Invalid HRP\");\n      }\n\n      var buf = Buffer.alloc(1 + hrp.length);\n      buf.writeUInt8(hrp.length, 0);\n      buf.write(hrp, 1);\n      return buf;\n    }\n  }, {\n    key: \"_serializeHDPath\",\n    value: function _serializeHDPath(path) {\n      if (path == null || path.length < 3) {\n        throw new Error(\"Invalid path.\");\n      }\n\n      if (path.length > 10) {\n        throw new Error(\"Invalid path. Length should be <= 10\");\n      }\n\n      var buf = Buffer.alloc(1 + 4 * path.length);\n      buf.writeUInt8(path.length, 0);\n\n      for (var i = 0; i < path.length; i++) {\n        var v = path[i];\n\n        if (i < 3) {\n          v |= 0x80000000; // Harden\n        }\n\n        buf.writeInt32LE(v, 1 + i * 4);\n      }\n\n      return buf;\n    }\n  }, {\n    key: \"_errorMessage\",\n    value: function _errorMessage(code) {\n      switch (code) {\n        case 1:\n          return \"U2F: Unknown\";\n\n        case 2:\n          return \"U2F: Bad request\";\n\n        case 3:\n          return \"U2F: Configuration unsupported\";\n\n        case 4:\n          return \"U2F: Device Ineligible\";\n\n        case 5:\n          return \"U2F: Timeout\";\n\n        case 14:\n          return \"Timeout\";\n\n        case 0x9000:\n          return \"No errors\";\n\n        case 0x9001:\n          return \"Device is busy\";\n\n        case 0x6400:\n          return \"Execution Error\";\n\n        case 0x6700:\n          return \"Wrong Length\";\n\n        case 0x6982:\n          return \"Empty Buffer\";\n\n        case 0x6983:\n          return \"Output buffer too small\";\n\n        case 0x6984:\n          return \"Data is invalid\";\n\n        case 0x6985:\n          return \"Conditions not satisfied\";\n\n        case 0x6986:\n          return \"Transaction rejected\";\n\n        case 0x6a80:\n          return \"Bad key handle\";\n\n        case 0x6b00:\n          return \"Invalid P1/P2\";\n\n        case 0x6d00:\n          return \"Instruction not supported\";\n\n        case 0x6e00:\n          return \"The app does not seem to be open\";\n\n        case 0x6f00:\n          return \"Unknown error\";\n\n        case 0x6f01:\n          return \"Sign/verify error\";\n\n        default:\n          return \"Unknown error code\";\n      }\n    }\n    /* GET_VERSION */\n    // #### Payload\n    // | Field | Type     | Content                | Expected |\n    // | ----- | -------- | ---------------------- | -------- |\n    // | CLA   | byte (1) | Application Identifier | 0xBC     |\n    // | INS   | byte (1) | Instruction ID         | 0x00     |\n    // | P1    | byte (1) | Parameter 1            | ignored  |\n    // | P2    | byte (1) | Parameter 2            | ignored  |\n    // | L     | byte (1) | Bytes in payload       | 0        |\n    // #### Response\n    // | Field   | Type     | Content       | Note                            |\n    // | ------- | -------- | ------------- | ------------------------------- |\n    // | CLA     | byte (1) | Test Mode     | 0xFF means test mode is enabled |\n    // | MAJOR   | byte (1) | Version Major |                                 |\n    // | MINOR   | byte (1) | Version Minor |                                 |\n    // | PATCH   | byte (1) | Version Patch |                                 |\n    // | LOCKED  | byte (1) | Device Locked | boolean                         |\n    // | SW1-SW2 | byte (2) | Return code   | see list of return codes        |\n\n    /**\n     * Gets the version of the Ledger app that is currently open on the device.\n     * @throws Will throw Error if a transport error occurs, or if the firmware app is not open.\n     */\n\n  }, {\n    key: \"getVersion\",\n    value: function () {\n      var _getVersion = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee() {\n        var result, apduResponse, returnCode, statusCode, statusText, message, stack;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                result = {};\n                _context.prev = 1;\n\n                this._transport.setExchangeTimeout(this._nonInteractiveTimeout);\n\n                _context.next = 5;\n                return this._transport.send(CLA, INS_GET_VERSION, 0, 0, Buffer.alloc(0), ACCEPT_STATUSES);\n\n              case 5:\n                apduResponse = _context.sent;\n\n                if (Buffer.isBuffer(apduResponse)) {\n                  _context.next = 8;\n                  break;\n                }\n\n                throw new Error(\"expected apduResponse to be Buffer\");\n\n              case 8:\n                returnCode = apduResponse.slice(-2);\n                result[\"test_mode\"] = apduResponse[0] !== 0;\n                result[\"major\"] = apduResponse[1];\n                result[\"minor\"] = apduResponse[2];\n                result[\"patch\"] = apduResponse[3];\n                result[\"device_locked\"] = apduResponse[4] === 1;\n                result[\"return_code\"] = returnCode[0] * 256 + returnCode[1];\n                result[\"error_message\"] = this._errorMessage(result[\"return_code\"]);\n                _context.next = 23;\n                break;\n\n              case 18:\n                _context.prev = 18;\n                _context.t0 = _context[\"catch\"](1);\n                statusCode = _context.t0.statusCode, statusText = _context.t0.statusText, message = _context.t0.message, stack = _context.t0.stack;\n                console.warn(\"Ledger getVersion error:\", this._errorMessage(statusCode), message, statusText, stack);\n                throw _context.t0;\n\n              case 23:\n                return _context.abrupt(\"return\", result);\n\n              case 24:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 18]]);\n      }));\n\n      function getVersion() {\n        return _getVersion.apply(this, arguments);\n      }\n\n      return getVersion;\n    }()\n    /* PUBLIC_KEY_SECP256K1 */\n    // #### Payload\n    // | Field | Type     | Content                 | Expected |\n    // | ----- | -------- | ----------------------  | -------- |\n    // | CLA   | byte (1) | Application Identifier  | 0xBC     |\n    // | INS   | byte (1) | Instruction ID          | 0x01     |\n    // | P1    | byte (1) | Parameter 1             | ignored  |\n    // | P2    | byte (1) | Parameter 2             | ignored  |\n    // | L     | byte (1) | Bytes in payload        | (depends) |\n    // | PL    | byte (1) | Derivation Path Length  | 3<=PL<=10 |\n    // | Path[0] | byte (4) | Derivation Path Data    | 44 |\n    // | Path[1] | byte (4) | Derivation Path Data    | 118 |\n    // | ..  | byte (4) | Derivation Path Data    |  |\n    // | Path[PL-1]  | byte (4) | Derivation Path Data    |  |\n    // First three items in the derivation path will be hardened automatically hardened\n    // #### Response\n    // | Field   | Type      | Content       | Note                            |\n    // | ------- | --------- | ------------- | ------------------------------- |\n    // | PK      | byte (65) | Public Key    |  |\n    // | SW1-SW2 | byte (2)  | Return code   | see list of return codes        |\n\n    /**\n     * Gets the public key from the Ledger app that is currently open on the device.\n     * @param {array} hdPath The HD path to use to get the public key. Default is [44, 714, 0, 0, 0]\n     * @throws Will throw Error if a transport error occurs, or if the firmware app is not open.\n     */\n\n  }, {\n    key: \"publicKeySecp256k1\",\n    value: function () {\n      var _publicKeySecp256k = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n        var hdPath,\n            result,\n            apduResponse,\n            returnCode,\n            statusCode,\n            statusText,\n            message,\n            stack,\n            _args2 = arguments;\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                hdPath = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : [44, 714, 0, 0, 0];\n                result = {};\n                _context2.prev = 2;\n\n                this._transport.setExchangeTimeout(this._nonInteractiveTimeout);\n\n                _context2.next = 6;\n                return this._transport.send(CLA, INS_PUBLIC_KEY_SECP256K1, 0, 0, this._serializeHDPath(hdPath), ACCEPT_STATUSES);\n\n              case 6:\n                apduResponse = _context2.sent;\n\n                if (Buffer.isBuffer(apduResponse)) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                throw new Error(\"expected apduResponse to be Buffer\");\n\n              case 9:\n                returnCode = apduResponse.slice(-2);\n                result[\"pk\"] = apduResponse.slice(0, 1 + 64);\n                result[\"return_code\"] = returnCode[0] * 256 + returnCode[1];\n                result[\"error_message\"] = this._errorMessage(result[\"return_code\"]);\n                _context2.next = 20;\n                break;\n\n              case 15:\n                _context2.prev = 15;\n                _context2.t0 = _context2[\"catch\"](2);\n                statusCode = _context2.t0.statusCode, statusText = _context2.t0.statusText, message = _context2.t0.message, stack = _context2.t0.stack;\n                console.warn(\"Ledger publicKeySecp256k1 error:\", this._errorMessage(statusCode), message, statusText, stack);\n                throw _context2.t0;\n\n              case 20:\n                return _context2.abrupt(\"return\", result);\n\n              case 21:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[2, 15]]);\n      }));\n\n      function publicKeySecp256k1() {\n        return _publicKeySecp256k.apply(this, arguments);\n      }\n\n      return publicKeySecp256k1;\n    }()\n    /* SIGN_SECP256K1 */\n    // #### Payload\n    // | Field | Type     | Content                | Expected |\n    // | ----- | -------- | ---------------------- | -------- |\n    // | CLA   | byte (1) | Application Identifier | 0xBC     |\n    // | INS   | byte (1) | Instruction ID         | 0x02     |\n    // | P1    | byte (1) | Packet Current Index   |   |\n    // | P2    | byte (1) | Packet Total Count     |\n    //   |\n    // | L     | byte (1) | Bytes in payload       | (depends)        |\n    // The first packet/chunk includes only the derivation path\n    // All other packets/chunks should contain message to sign\n    // *First Packet*\n    // | Field | Type     | Content                | Expected |\n    // | ----- | -------- | ---------------------- | -------- |\n    // | PL    | byte (1) | Derivation Path Length  | 3<=PL<=10 |\n    // | Path[0] | byte (4) | Derivation Path Data    | 44 |\n    // | Path[1] | byte (4) | Derivation Path Data    | 118 |\n    // | ..  | byte (4) | Derivation Path Data    |  |\n    // | Path[PL-1]  | byte (4) | Derivation Path Data    |  |\n    // | Message | bytes... | Message to Sign | |\n    // *Other Chunks/Packets*\n    // | Field | Type     | Content                | Expected |\n    // | ----- | -------- | ---------------------- | -------- |\n    // | Message | bytes... | Message to Sign | |\n    // #### Response\n    // | Field   | Type      | Content       | Note                            |\n    // | ------- | --------- | ------------- | ------------------------------- |\n    // | SIG     | byte (~71) | Signature     | DER encoded (length prefixed parts) |\n    // | SW1-SW2 | byte (2)  | Return code   | see list of return codes        |\n\n  }, {\n    key: \"_signGetChunks\",\n    value: function _signGetChunks(data, hdPath) {\n      var chunks = [];\n      chunks.push(this._serializeHDPath(hdPath));\n      var buffer = Buffer.from(data);\n\n      for (var i = 0; i < buffer.length; i += CHUNK_SIZE) {\n        var end = i + CHUNK_SIZE;\n\n        if (i > buffer.length) {\n          end = buffer.length;\n        }\n\n        chunks.push(buffer.slice(i, end));\n      }\n\n      return chunks;\n    }\n  }, {\n    key: \"_signSendChunk\",\n    value: function () {\n      var _signSendChunk2 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(chunkIdx, chunksCount, chunk) {\n        var result, apduResponse, returnCode, statusCode, statusText, message, stack;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                result = {};\n                _context3.prev = 1;\n                _context3.next = 4;\n                return this._transport.send(CLA, INS_SIGN_SECP256K1, chunkIdx, chunksCount, chunk);\n\n              case 4:\n                apduResponse = _context3.sent;\n\n                if (Buffer.isBuffer(apduResponse)) {\n                  _context3.next = 7;\n                  break;\n                }\n\n                throw new Error(\"expected apduResponse to be Buffer\");\n\n              case 7:\n                returnCode = apduResponse.slice(-2);\n                result[\"return_code\"] = returnCode[0] * 256 + returnCode[1];\n                result[\"error_message\"] = this._errorMessage(result[\"return_code\"]);\n                result[\"signature\"] = null;\n\n                if (apduResponse.length > 2) {\n                  result[\"signature\"] = apduResponse.slice(0, apduResponse.length - 2);\n                }\n\n                _context3.next = 19;\n                break;\n\n              case 14:\n                _context3.prev = 14;\n                _context3.t0 = _context3[\"catch\"](1);\n                statusCode = _context3.t0.statusCode, statusText = _context3.t0.statusText, message = _context3.t0.message, stack = _context3.t0.stack;\n                console.warn(\"Ledger signSendChunk error:\", this._errorMessage(statusCode), message, statusText, stack);\n                throw _context3.t0;\n\n              case 19:\n                return _context3.abrupt(\"return\", result);\n\n              case 20:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[1, 14]]);\n      }));\n\n      function _signSendChunk(_x, _x2, _x3) {\n        return _signSendChunk2.apply(this, arguments);\n      }\n\n      return _signSendChunk;\n    }()\n    /**\n     * Sends a transaction sign doc to the Ledger app to be signed.\n     * @param {Buffer} signBytes The TX sign doc bytes to sign\n     * @param {array} hdPath The HD path to use to get the public key. Default is [44, 714, 0, 0, 0]\n     * @throws Will throw Error if a transport error occurs, or if the firmware app is not open.\n     */\n\n  }, {\n    key: \"signSecp256k1\",\n    value: function () {\n      var _signSecp256k = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(signBytes) {\n        var hdPath,\n            result,\n            chunks,\n            response,\n            statusCode,\n            statusText,\n            message,\n            stack,\n            i,\n            _statusCode,\n            _statusText,\n            _message,\n            _stack,\n            signature,\n            rOffset,\n            rLen,\n            sLen,\n            sOffset,\n            sigR,\n            sigS,\n            _args4 = arguments;\n\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                hdPath = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : [44, 714, 0, 0, 0];\n                result = {};\n                chunks = this._signGetChunks(signBytes, hdPath); // _signSendChunk doesn't throw, it catches exceptions itself. no need for try/catch\n\n                _context4.prev = 3;\n\n                if (chunks.length <= 1) {\n                  this._transport.setExchangeTimeout(this._interactiveTimeout);\n                } else {\n                  // more to come, non-interactive\n                  this._transport.setExchangeTimeout(this._nonInteractiveTimeout);\n                }\n\n                _context4.next = 7;\n                return this._signSendChunk(1, chunks.length, chunks[0]);\n\n              case 7:\n                response = _context4.sent;\n                result[\"return_code\"] = response.return_code;\n                result[\"error_message\"] = response.error_message;\n                result[\"signature\"] = null;\n                _context4.next = 18;\n                break;\n\n              case 13:\n                _context4.prev = 13;\n                _context4.t0 = _context4[\"catch\"](3);\n                statusCode = _context4.t0.statusCode, statusText = _context4.t0.statusText, message = _context4.t0.message, stack = _context4.t0.stack;\n                console.warn(\"Ledger signSecp256k1 error (chunk 1):\", this._errorMessage(statusCode), message, statusText, stack);\n                throw _context4.t0;\n\n              case 18:\n                if (!(response.return_code === 0x9000)) {\n                  _context4.next = 60;\n                  break;\n                }\n\n                i = 1;\n\n              case 20:\n                if (!(i < chunks.length)) {\n                  _context4.next = 40;\n                  break;\n                }\n\n                _context4.prev = 21;\n\n                if (i === chunks.length - 1) {\n                  // last?\n                  this._transport.setExchangeTimeout(this._interactiveTimeout);\n                }\n\n                _context4.next = 25;\n                return this._signSendChunk(1 + i, chunks.length, chunks[i]);\n\n              case 25:\n                response = _context4.sent;\n                result[\"return_code\"] = response.return_code;\n                result[\"error_message\"] = response.error_message;\n                _context4.next = 35;\n                break;\n\n              case 30:\n                _context4.prev = 30;\n                _context4.t1 = _context4[\"catch\"](21);\n                _statusCode = _context4.t1.statusCode, _statusText = _context4.t1.statusText, _message = _context4.t1.message, _stack = _context4.t1.stack;\n                console.warn(\"Ledger signSecp256k1 error (chunk 2):\", this._errorMessage(_statusCode), _message, _statusText, _stack);\n                throw _context4.t1;\n\n              case 35:\n                if (!(response.return_code !== 0x9000)) {\n                  _context4.next = 37;\n                  break;\n                }\n\n                return _context4.abrupt(\"break\", 40);\n\n              case 37:\n                i++;\n                _context4.next = 20;\n                break;\n\n              case 40:\n                result[\"return_code\"] = response.return_code;\n                result[\"error_message\"] = response.error_message; // Ledger has encoded the sig in ASN1 DER format, but we need a 64-byte buffer of <r,s>\n                // DER-encoded signature from Ledger:\n                // 0 0x30: a header byte indicating a compound structure\n                // 1 A 1-byte length descriptor for all what follows (ignore)\n                // 2 0x02: a header byte indicating an integer\n                // 3 A 1-byte length descriptor for the R value\n                // 4 The R coordinate, as a big-endian integer\n                //   0x02: a header byte indicating an integer\n                //   A 1-byte length descriptor for the S value\n                //   The S coordinate, as a big-endian integer\n                //  = 7 bytes of overhead\n\n                signature = response.signature;\n\n                if (!(!signature || !signature.length)) {\n                  _context4.next = 45;\n                  break;\n                }\n\n                throw new Error(\"Ledger assertion failed: Expected a non-empty signature from the device\");\n\n              case 45:\n                if (!(signature[0] !== 0x30)) {\n                  _context4.next = 47;\n                  break;\n                }\n\n                throw new Error(\"Ledger assertion failed: Expected a signature header of 0x30\");\n\n              case 47:\n                // decode DER string format\n                rOffset = 4;\n                rLen = signature[3];\n                sLen = signature[4 + rLen + 1]; // skip over following 0x02 type prefix for s\n\n                sOffset = signature.length - sLen; // we can safely ignore the first byte in the 33 bytes cases\n\n                if (rLen === 33) {\n                  rOffset++; // chop off 0x00 padding\n\n                  rLen--;\n                }\n\n                if (sLen === 33) sOffset++; // as above\n\n                sigR = signature.slice(rOffset, rOffset + rLen); // skip e.g. 3045022100 and pad\n\n                sigS = signature.slice(sOffset);\n                signature = result[\"signature\"] = Buffer.concat([sigR, sigS]);\n\n                if (!(signature.length !== 64)) {\n                  _context4.next = 58;\n                  break;\n                }\n\n                throw new Error(\"Ledger assertion failed: incorrect signature length \".concat(signature.length));\n\n              case 58:\n                _context4.next = 61;\n                break;\n\n              case 60:\n                throw new Error(\"Unable to sign the transaction. Return code \" + response.return_code);\n\n              case 61:\n                return _context4.abrupt(\"return\", result);\n\n              case 62:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[3, 13], [21, 30]]);\n      }));\n\n      function signSecp256k1(_x4) {\n        return _signSecp256k.apply(this, arguments);\n      }\n\n      return signSecp256k1;\n    }()\n    /* INS_SHOW_ADDR_SECP256K1 */\n    // #### Command\n    // | Field      | Type           | Content                | Expected       |\n    // | ---------- | -------------- | ---------------------- | -------------- |\n    // | CLA        | byte (1)       | Application Identifier | 0xBC           |\n    // | INS        | byte (1)       | Instruction ID         | 0x03           |\n    // | P1         | byte (1)       | Parameter 1            | ignored        |\n    // | P2         | byte (1)       | Parameter 2            | ignored        |\n    // | L          | byte (1)       | Bytes in payload       | (depends)      |\n    // | HRP_LEN    | byte(1)        | Bech32 HRP Length      | 1<=HRP_LEN<=83 |\n    // | HRP        | byte (HRP_LEN) | Bech32 HRP             |                |\n    // | PL         | byte (1)       | Derivation Path Length | 3<=PL<=5       |\n    // | Path[0]    | byte (4)       | Derivation Path Data   | 44             |\n    // | Path[1]    | byte (4)       | Derivation Path Data   | 714            |\n    // | ..         | byte (4)       | Derivation Path Data   |                |\n    // | Path[PL-1] | byte (4)       | Derivation Path Data   |                |\n    // First three items in the derivation path will be automatically hardened\n\n    /**\n     * Shows the user's address for the given HD path on the device display.\n     * @param {string} hrp The bech32 human-readable prefix\n     * @param {array} hdPath The HD path to use to get the public key. Default is [44, 714, 0, 0, 0]\n     * @throws Will throw Error if a transport error occurs, or if the firmware app is not open.\n     */\n\n  }, {\n    key: \"showAddress\",\n    value: function () {\n      var _showAddress = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee5() {\n        var hrp,\n            hdPath,\n            result,\n            data,\n            apduResponse,\n            returnCode,\n            _args5 = arguments;\n        return _regenerator[\"default\"].wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                hrp = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : \"bnb\";\n                hdPath = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : [44, 714, 0, 0, 0];\n                result = {};\n                data = Buffer.concat([this._serializeHRP(hrp), this._serializeHDPath(hdPath)]);\n\n                this._transport.setExchangeTimeout(this._interactiveTimeout);\n\n                _context5.next = 7;\n                return this._transport.send(CLA, INS_SHOW_ADDR_SECP256K1, 0, 0, data, ACCEPT_STATUSES);\n\n              case 7:\n                apduResponse = _context5.sent;\n\n                if (Buffer.isBuffer(apduResponse)) {\n                  _context5.next = 10;\n                  break;\n                }\n\n                throw new Error(\"expected apduResponse to be Buffer\");\n\n              case 10:\n                returnCode = apduResponse.slice(-2);\n                result[\"return_code\"] = returnCode[0] * 256 + returnCode[1];\n                result[\"error_message\"] = this._errorMessage(result[\"return_code\"]);\n\n                if (result.return_code === 0x6a80) {\n                  result[\"error_message\"] = apduResponse.slice(0, apduResponse.length - 2).toString(\"ascii\");\n                }\n\n                return _context5.abrupt(\"return\", result);\n\n              case 15:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function showAddress() {\n        return _showAddress.apply(this, arguments);\n      }\n\n      return showAddress;\n    }() // convenience aliases\n\n    /**\n     * Gets the public key from the Ledger app that is currently open on the device.\n     * @param {array} hdPath The HD path to use to get the public key. Default is [44, 714, 0, 0, 0]\n     * @throws Will throw Error if a transport error occurs, or if the firmware app is not open.\n     */\n\n  }, {\n    key: \"getPublicKey\",\n    value: function getPublicKey(hdPath) {\n      return this.publicKeySecp256k1(hdPath);\n    }\n    /**\n     * Sends a transaction sign doc to the Ledger app to be signed.\n     * @param {Buffer} signBytes The TX sign doc bytes to sign\n     * @param {array} hdPath The HD path to use to get the public key. Default is [44, 714, 0, 0, 0]\n     * @throws Will throw Error if a transport error occurs, or if the firmware app is not open.\n     */\n\n  }, {\n    key: \"sign\",\n    value: function sign(signBytes, hdPath) {\n      return this.signSecp256k1(signBytes, hdPath);\n    }\n  }]);\n  return LedgerApp;\n}();\n\nmodule.exports = LedgerApp;\nvar _default = LedgerApp;\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"script"}