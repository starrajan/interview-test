{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.receiveAPDU = void 0;\n\nvar _errors = require(\"@ledgerhq/errors\");\n\nvar _rxjs = require(\"rxjs\");\n\nvar _logs = require(\"@ledgerhq/logs\");\n\nconst TagId = 0x05; // operator that transform the input raw stream into one apdu response and finishes\n\nconst receiveAPDU = rawStream => _rxjs.Observable.create(o => {\n  let notifiedIndex = 0;\n  let notifiedDataLength = 0;\n  let notifiedData = Buffer.alloc(0);\n  const sub = rawStream.subscribe({\n    complete: () => {\n      o.error(new _errors.DisconnectedDevice());\n      sub.unsubscribe();\n    },\n    error: e => {\n      (0, _logs.log)(\"ble-error\", \"in receiveAPDU \" + String(e));\n      o.error(e);\n      sub.unsubscribe();\n    },\n    next: value => {\n      const tag = value.readUInt8(0);\n      const index = value.readUInt16BE(1);\n      let data = value.slice(3);\n\n      if (tag !== TagId) {\n        o.error(new _errors.TransportError(\"Invalid tag \" + tag.toString(16), \"InvalidTag\"));\n        return;\n      }\n\n      if (notifiedIndex !== index) {\n        o.error(new _errors.TransportError(\"BLE: Invalid sequence number. discontinued chunk. Received \" + index + \" but expected \" + notifiedIndex, \"InvalidSequence\"));\n        return;\n      }\n\n      if (index === 0) {\n        notifiedDataLength = data.readUInt16BE(0);\n        data = data.slice(2);\n      }\n\n      notifiedIndex++;\n      notifiedData = Buffer.concat([notifiedData, data]);\n\n      if (notifiedData.length > notifiedDataLength) {\n        o.error(new _errors.TransportError(\"BLE: received too much data. discontinued chunk. Received \" + notifiedData.length + \" but expected \" + notifiedDataLength, \"BLETooMuchData\"));\n        return;\n      }\n\n      if (notifiedData.length === notifiedDataLength) {\n        o.next(notifiedData);\n        o.complete();\n        sub.unsubscribe();\n      }\n    }\n  });\n  return () => {\n    sub.unsubscribe();\n  };\n});\n\nexports.receiveAPDU = receiveAPDU;","map":{"version":3,"sources":["../../src/ble/receiveAPDU.js"],"names":["TagId","receiveAPDU","rawStream","o","notifiedIndex","notifiedDataLength","notifiedData","Buffer","sub","complete","DisconnectedDevice","error","e","String","next","value","tag","index","data","TransportError"],"mappings":";;;;;;;AAEA,IAAA,OAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AACA,IAAA,KAAA,GAAA,OAAA,CAAA,MAAA,CAAA;;AACA,IAAA,KAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AAEA,MAAMA,KAAK,GAAX,IAAA,C,CAEA;;AACO,MAAMC,WAAW,GACtBC,SADyB,IAGzB,KAAA,CAAA,UAAA,CAAA,MAAA,CAAmBC,CAAD,IAAO;AACvB,MAAIC,aAAa,GAAjB,CAAA;AACA,MAAIC,kBAAkB,GAAtB,CAAA;AACA,MAAIC,YAAY,GAAGC,MAAM,CAANA,KAAAA,CAAnB,CAAmBA,CAAnB;AAEA,QAAMC,GAAG,GAAG,SAAS,CAAT,SAAA,CAAoB;AAC9BC,IAAAA,QAAQ,EAAE,MAAM;AACdN,MAAAA,CAAC,CAADA,KAAAA,CAAQ,IAAIO,OAAAA,CAAZP,kBAAQ,EAARA;AACAK,MAAAA,GAAG,CAAHA,WAAAA;AAH4B,KAAA;AAK9BG,IAAAA,KAAK,EAAGC,CAAD,IAAO;AACZ,OAAA,GAAA,KAAA,CAAA,GAAA,EAAA,WAAA,EAAiB,oBAAoBC,MAAM,CAA3C,CAA2C,CAA3C;AACAV,MAAAA,CAAC,CAADA,KAAAA,CAAAA,CAAAA;AACAK,MAAAA,GAAG,CAAHA,WAAAA;AAR4B,KAAA;AAU9BM,IAAAA,IAAI,EAAGC,KAAD,IAAW;AACf,YAAMC,GAAG,GAAGD,KAAK,CAALA,SAAAA,CAAZ,CAAYA,CAAZ;AACA,YAAME,KAAK,GAAGF,KAAK,CAALA,YAAAA,CAAd,CAAcA,CAAd;AACA,UAAIG,IAAI,GAAGH,KAAK,CAALA,KAAAA,CAAX,CAAWA,CAAX;;AAEA,UAAIC,GAAG,KAAP,KAAA,EAAmB;AACjBb,QAAAA,CAAC,CAADA,KAAAA,CACE,IAAIgB,OAAAA,CAAJ,cAAA,CAAmB,iBAAiBH,GAAG,CAAHA,QAAAA,CAApC,EAAoCA,CAApC,EADFb,YACE,CADFA;AAGA;AACD;;AAED,UAAIC,aAAa,KAAjB,KAAA,EAA6B;AAC3BD,QAAAA,CAAC,CAADA,KAAAA,CACE,IAAIgB,OAAAA,CAAJ,cAAA,CACE,gEAAA,KAAA,GAAA,gBAAA,GADF,aAAA,EADFhB,iBACE,CADFA;AASA;AACD;;AAED,UAAIc,KAAK,KAAT,CAAA,EAAiB;AACfZ,QAAAA,kBAAkB,GAAGa,IAAI,CAAJA,YAAAA,CAArBb,CAAqBa,CAArBb;AACAa,QAAAA,IAAI,GAAGA,IAAI,CAAJA,KAAAA,CAAPA,CAAOA,CAAPA;AACD;;AACDd,MAAAA,aAAa;AACbE,MAAAA,YAAY,GAAGC,MAAM,CAANA,MAAAA,CAAc,CAAA,YAAA,EAA7BD,IAA6B,CAAdC,CAAfD;;AACA,UAAIA,YAAY,CAAZA,MAAAA,GAAJ,kBAAA,EAA8C;AAC5CH,QAAAA,CAAC,CAADA,KAAAA,CACE,IAAIgB,OAAAA,CAAJ,cAAA,CACE,+DACEb,YAAY,CADd,MAAA,GAAA,gBAAA,GADF,kBAAA,EADFH,gBACE,CADFA;AASA;AACD;;AACD,UAAIG,YAAY,CAAZA,MAAAA,KAAJ,kBAAA,EAAgD;AAC9CH,QAAAA,CAAC,CAADA,IAAAA,CAAAA,YAAAA;AACAA,QAAAA,CAAC,CAADA,QAAAA;AACAK,QAAAA,GAAG,CAAHA,WAAAA;AACD;AACF;AA1D6B,GAApB,CAAZ;AA6DA,SAAO,MAAM;AACXA,IAAAA,GAAG,CAAHA,WAAAA;AADF,GAAA;AArEG,CAGL,CAHK","sourcesContent":["// @flow\n\nimport { TransportError, DisconnectedDevice } from \"@ledgerhq/errors\";\nimport { Observable } from \"rxjs\";\nimport { log } from \"@ledgerhq/logs\";\n\nconst TagId = 0x05;\n\n// operator that transform the input raw stream into one apdu response and finishes\nexport const receiveAPDU = (\n  rawStream: Observable<Buffer>\n): Observable<Buffer> =>\n  Observable.create((o) => {\n    let notifiedIndex = 0;\n    let notifiedDataLength = 0;\n    let notifiedData = Buffer.alloc(0);\n\n    const sub = rawStream.subscribe({\n      complete: () => {\n        o.error(new DisconnectedDevice());\n        sub.unsubscribe();\n      },\n      error: (e) => {\n        log(\"ble-error\", \"in receiveAPDU \" + String(e));\n        o.error(e);\n        sub.unsubscribe();\n      },\n      next: (value) => {\n        const tag = value.readUInt8(0);\n        const index = value.readUInt16BE(1);\n        let data = value.slice(3);\n\n        if (tag !== TagId) {\n          o.error(\n            new TransportError(\"Invalid tag \" + tag.toString(16), \"InvalidTag\")\n          );\n          return;\n        }\n\n        if (notifiedIndex !== index) {\n          o.error(\n            new TransportError(\n              \"BLE: Invalid sequence number. discontinued chunk. Received \" +\n                index +\n                \" but expected \" +\n                notifiedIndex,\n              \"InvalidSequence\"\n            )\n          );\n          return;\n        }\n\n        if (index === 0) {\n          notifiedDataLength = data.readUInt16BE(0);\n          data = data.slice(2);\n        }\n        notifiedIndex++;\n        notifiedData = Buffer.concat([notifiedData, data]);\n        if (notifiedData.length > notifiedDataLength) {\n          o.error(\n            new TransportError(\n              \"BLE: received too much data. discontinued chunk. Received \" +\n                notifiedData.length +\n                \" but expected \" +\n                notifiedDataLength,\n              \"BLETooMuchData\"\n            )\n          );\n          return;\n        }\n        if (notifiedData.length === notifiedDataLength) {\n          o.next(notifiedData);\n          o.complete();\n          sub.unsubscribe();\n        }\n      },\n    });\n\n    return () => {\n      sub.unsubscribe();\n    };\n  });\n"]},"metadata":{},"sourceType":"script"}