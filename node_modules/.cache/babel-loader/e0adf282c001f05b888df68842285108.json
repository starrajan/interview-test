{"ast":null,"code":"import { Observable } from \"rxjs\";\nimport { log } from \"@ledgerhq/logs\";\nexport const monitorCharacteristic = characteristic => Observable.create(o => {\n  log(\"ble-verbose\", \"start monitor \" + characteristic.uuid);\n\n  function onCharacteristicValueChanged(event) {\n    const characteristic = event.target;\n\n    if (characteristic.value) {\n      o.next(Buffer.from(characteristic.value.buffer));\n    }\n  }\n\n  characteristic.startNotifications().then(() => {\n    characteristic.addEventListener(\"characteristicvaluechanged\", onCharacteristicValueChanged);\n  });\n  return () => {\n    log(\"ble-verbose\", \"end monitor \" + characteristic.uuid);\n    characteristic.stopNotifications();\n  };\n});","map":{"version":3,"sources":["../src/monitorCharacteristic.js"],"names":["monitorCharacteristic","characteristic","o","log","event","Buffer"],"mappings":"AACA,SAAA,UAAA,QAAA,MAAA;AAEA,SAAA,GAAA,QAAA,gBAAA;AAEA,OAAO,MAAMA,qBAAqB,GAChCC,cADmC,IAGnC,UAAU,CAAV,MAAA,CAAmBC,CAAD,IAAO;AACvBC,EAAAA,GAAG,CAAA,aAAA,EAAgB,mBAAmBF,cAAc,CAApDE,IAAG,CAAHA;;AAEA,WAAA,4BAAA,CAAA,KAAA,EAA6C;AAC3C,UAAMF,cAAc,GAAGG,KAAK,CAA5B,MAAA;;AACA,QAAIH,cAAc,CAAlB,KAAA,EAA0B;AACxBC,MAAAA,CAAC,CAADA,IAAAA,CAAOG,MAAM,CAANA,IAAAA,CAAYJ,cAAc,CAAdA,KAAAA,CAAnBC,MAAOG,CAAPH;AACD;AACF;;AAEDD,EAAAA,cAAc,CAAdA,kBAAAA,GAAAA,IAAAA,CAAyC,MAAM;AAC7CA,IAAAA,cAAc,CAAdA,gBAAAA,CAAAA,4BAAAA,EAAAA,4BAAAA;AADFA,GAAAA;AAOA,SAAO,MAAM;AACXE,IAAAA,GAAG,CAAA,aAAA,EAAgB,iBAAiBF,cAAc,CAAlDE,IAAG,CAAHA;AACAF,IAAAA,cAAc,CAAdA,iBAAAA;AAFF,GAAA;AApBG,CAGL,CAHK","sourcesContent":["// @flow\nimport { Observable } from \"rxjs\";\nimport type { Characteristic } from \"./types\";\nimport { log } from \"@ledgerhq/logs\";\n\nexport const monitorCharacteristic = (\n  characteristic: Characteristic\n): Observable<Buffer> =>\n  Observable.create((o) => {\n    log(\"ble-verbose\", \"start monitor \" + characteristic.uuid);\n\n    function onCharacteristicValueChanged(event) {\n      const characteristic = event.target;\n      if (characteristic.value) {\n        o.next(Buffer.from(characteristic.value.buffer));\n      }\n    }\n\n    characteristic.startNotifications().then(() => {\n      characteristic.addEventListener(\n        \"characteristicvaluechanged\",\n        onCharacteristicValueChanged\n      );\n    });\n\n    return () => {\n      log(\"ble-verbose\", \"end monitor \" + characteristic.uuid);\n      characteristic.stopNotifications();\n    };\n  });\n"]},"metadata":{},"sourceType":"module"}