{"ast":null,"code":"import { crypto } from \"@binance-chain/javascript-sdk\";\nimport { Client as binanceClient } from \"@thorchain/asgardex-binance\"; // import midgard from '@thorchain/asgardex-midgard';\n\nimport axios from \"axios\";\nconst keystore = `{\"version\":1,\"id\":\"6afe418d-78ba-42ee-b450-140ba636dca2\",\"crypto\":{\"ciphertext\":\"ec98f5971d6dfb7fd594725f0abd605b91f38c865dc07fdf0d099a4752ce0df5\",\"cipherparams\":{\"iv\":\"f78606ff8c9de4e1bc112b52c44594b1\"},\"cipher\":\"aes-256-ctr\",\"kdf\":\"pbkdf2\",\"kdfparams\":{\"dklen\":32,\"salt\":\"0effe86640154014ffb7eaa740cba2b07871b86367baf93c6ca81f1b4994e557\",\"c\":262144,\"prf\":\"hmac-sha256\"},\"mac\":\"89a4372999b14284ce7e98bf0a81063c154167cec6b05d6cf3a974b74abab972e622e71cc4a0038d369b9d65e67b9744396f9d85010ecdc1f6653112f5ee7d3a\"}}`;\nconst asgardexBncClient = new binanceClient({\n  network: \"testnet\"\n});\nconst bncClient = asgardexBncClient.getBncClient();\nconsole.log(crypto);\nconst privateKey = crypto.getPrivateKeyFromKeyStore(keystore, \"thorchain\");\nconst address = crypto.getAddressFromPrivateKey(privateKey, asgardexBncClient.getPrefix());\nbncClient.setPrivateKey(privateKey);\nbncClient.account_number = 29511;\nbncClient.chainId = \"Binance-Chain-Ganges\";\nconsole.log({\n  bncClient\n});\nconsole.log({\n  address,\n  privateKey\n}); //console.log(bncClient);\n\nconsole.log({\n  address,\n  privateKey\n});\n\nconst getAssetFormat = symbol => {\n  return `BNB.${symbol}`;\n};\n\nexport const getSwapMemo = (symbol, addr, sliplimit = \"\") => {\n  return `SWAP:${getAssetFormat(symbol)}:${addr}:${sliplimit}`;\n};\nexport const handleConfirmSwap = async () => {\n  try {\n    console.log(\"came1\");\n    const tokenAmountToSwap = 10;\n    bncClient.account_number = 29511;\n    bncClient.chainId = \"Binance-Chain-Ganges\";\n    console.log({\n      bncClient\n    });\n    let response = await confirmSwap(bncClient, address, \"RUNE-67C\", \"BTCB-101\", tokenAmountToSwap, true, 1032, \"tbnb1s7j4hyh2jech3hf5znuk8jup7yejclj4y2ekgh\");\n    console.log(response);\n  } catch (e) {\n    console.log({\n      e\n    });\n  }\n};\nexport const confirmSwap = (bncClient, wallet, symbolFrom, symbolTo, amount, protectSlip, slipLimit, poolAddress, destAddr = \"\") => {\n  return new Promise((resolve, reject) => {\n    const amountNumber = amount; //const limit = protectSlip && slipLimit ? slipLimit.amount().toString() : '';\n\n    const memo = getSwapMemo(symbolTo, destAddr, slipLimit);\n    console.log({\n      wallet,\n      poolAddress,\n      amountNumber,\n      symbolFrom,\n      memo\n    });\n    bncClient.transfer(wallet, poolAddress, amountNumber, symbolFrom, memo).then(response => resolve(response)).catch(error => reject(error));\n  });\n}; // handleConfirmSwap();\n\nexport const getStakeMemo = symbol => {\n  return `STAKE:${getAssetFormat(symbol)}`;\n};\nexport const handleConfirmStake = async () => {\n  try {\n    let response = await stakeRequest({\n      bncClient,\n      wallet: address,\n      runeAmount: 10,\n      //runeAmountToSend,\n      tokenAmount: 27.25164472,\n      //targetAmount,\n      poolAddress: \"tbnb1gag3mwutnzekj65m6s4hgqcdcc7f6qaf2rvxlc\",\n      symbolTo: \"AWC-31D\" //symbol,\n\n    });\n    console.log({\n      response\n    });\n  } catch (e) {\n    console.log({\n      e\n    });\n  }\n};\nvar StakeErrorMsg;\n\n(function (StakeErrorMsg) {\n  StakeErrorMsg[\"MISSING_SYMBOL\"] = \"Missing asset to stake.\";\n  StakeErrorMsg[\"MISSING_POOL_ADDRESS\"] = \"Missing Pool Address.\";\n  StakeErrorMsg[\"INVALID_TOKEN_AMOUNT\"] = \"Invalid TOKEN amount.\";\n  StakeErrorMsg[\"INVALID_RUNE_AMOUNT\"] = \"Invalid RUNE amount.\";\n})(StakeErrorMsg || (StakeErrorMsg = {}));\n\nexport const stakeRequest = (params //: StakeRequestParams,\n) => {\n  //}: Promise<TransferResult> => {\n  const {\n    bncClient,\n    wallet,\n    runeAmount,\n    tokenAmount,\n    poolAddress,\n    symbolTo\n  } = params;\n  return new Promise((resolve, reject) => {\n    // We have to convert BNs back into numbers needed by Binance JS SDK\n    // However, we are safe here, since we have already checked amounts of rune and token before\n    const runeAmountNumber = runeAmount; //* 1E8 //runeAmountValue.toNumber();\n\n    const tokenAmountNumber = tokenAmount; //* 1E8 //tokenAmountValue.toNumber();\n\n    const memo = getStakeMemo(symbolTo);\n\n    if (runeAmount > 0 && tokenAmount > 0) {\n      //runeAmountValue.isGreaterThan(0) && tokenAmountValue.isGreaterThan(0)) {\n      const outputs = [{\n        to: poolAddress,\n        coins: [{\n          denom: \"RUNE-67C\",\n          //RUNE_SYMBOL,\n          amount: runeAmountNumber\n        }, {\n          denom: symbolTo,\n          amount: tokenAmountNumber\n        }]\n      }];\n      console.log({\n        w: \"one\",\n        wallet,\n        outputs,\n        memo\n      });\n      console.log(outputs[0].coins);\n      bncClient.multiSend(wallet, outputs, memo).then(response => resolve(response)).catch(error => {\n        console.log(error);\n        reject(error);\n      });\n    } else if (runeAmount <= 0 && tokenAmount) {\n      //runeAmountValue.isLessThanOrEqualTo(0) && tokenAmount) {\n      console.log({\n        w: \"two\",\n        wallet,\n        poolAddress,\n        tokenAmountNumber,\n        symbolTo,\n        memo\n      });\n      bncClient.transfer(wallet, poolAddress, tokenAmountNumber, symbolTo, memo).then(response => resolve(response)).catch(error => reject(error));\n    } else if (runeAmount && tokenAmount <= 0) {\n      //tokenAmountValue.isLessThanOrEqualTo(0)) {\n      console.log({\n        w: \"three\",\n        wallet,\n        poolAddress,\n        tokenAmountNumber,\n        symbolTo,\n        memo\n      });\n      bncClient.transfer(wallet, poolAddress, runeAmountNumber, \"RUNE-67C\", memo).then(response => resolve(response)).catch(error => reject(error));\n    }\n  });\n}; //handleConfirmStake();\n\nexport const getWithdrawMemo = (symbol, percent) => {\n  return `WITHDRAW:${getAssetFormat(symbol)}:${percent}`;\n};\n\nconst handleConfirmWithdraw = async () => {\n  const withdrawRate = 4 / 100;\n  const percent = Number(Number(withdrawRate * 100).toFixed(0));\n  const response = await withdrawRequest({\n    bncClient,\n    wallet: address,\n    poolAddress: \"tbnb1ux38npsvajr8vjphqepvn0ynafjjssaj50ta6z\",\n    symbol: \"AWC-31D\",\n    percent\n  });\n  console.log(\"xd: \", response, response === null || response === void 0 ? void 0 : response.result);\n};\n\nconst withdrawRequest = params => {\n  const {\n    bncClient,\n    wallet,\n    poolAddress,\n    symbol,\n    percent\n  } = params;\n  return new Promise((resolve, reject) => {\n    if (!wallet) {\n      return reject(new Error(\"WithdrawErrorMsg.MISSING_WALLET\"));\n    }\n\n    if (!poolAddress) {\n      return reject(new Error(\"WithdrawErrorMsg.MISSING_POOL_ADDRESS\"));\n    }\n\n    const memo = getWithdrawMemo(symbol, percent * 100); // Minimum amount to send memo on-chain\n\n    const amount = 0.00000001;\n    bncClient.transfer(wallet, poolAddress, amount, \"RUNE-67C\", memo).then(response => resolve(response)) // If first tx ^ fails (e.g. there is no RUNE available)\n    // another tx w/ same memo will be sent, but by using BNB now\n    .catch(() => {\n      bncClient.transfer(wallet, poolAddress, amount, \"BNB\", memo).then(response => resolve(response)).catch(error => reject(error));\n    });\n  });\n}; //  handleConfirmWithdraw();\n\n\nconst baseURL = \"http://138.68.125.107:8080\";\nexport class MidgardService {\n  //   private logger = new Logger();\n  // async getBaseURL(): Promise<string> {\n  //   try {\n  //     const baseURL = await midgard('chaosnet', false);\n  //     //   this.logger.log(baseURL);\n  //     return baseURL;\n  //   } catch (error) {\n  //     console.log({error});\n  //     throw new Error('Cannot fetch baseURL');\n  //   }\n  // }\n  async gettxn(txid, offset, limit) {\n    // const baseURL = await this.getBaseURL();\n    try {\n      const txn = await axios.get(`${baseURL}/v1/txs`, {\n        params: {\n          txid: txid,\n          offset: offset,\n          limit: limit\n        }\n      });\n      return txn.data;\n    } catch (err) {\n      throw new Error(\"Error in axios request\");\n    }\n  }\n\n  async getAssetInfo(data) {\n    // const baseURL = await this.getBaseURL();\n    const asset = await axios.get(`${baseURL}/v1/assets`, {\n      params: {\n        asset: data\n      }\n    });\n\n    try {\n      return asset.data;\n    } catch (err) {\n      throw new Error(\"Asset not fetched\");\n    }\n  }\n\n  async getPools() {\n    console.log(\"came1\"); // const baseURL = await this.getBaseURL();\n\n    try {\n      const pool = await axios(`${baseURL}/v1/pools`);\n      return pool.data;\n    } catch (error) {\n      console.log({\n        error\n      });\n      throw new Error(\"No Pools found\");\n    }\n  }\n\n  async getPoolsDetails(asset) {\n    // const baseURL = await this.getBaseURL();\n    try {\n      const pool = await axios(`${baseURL}/v1/pools/detail`, {\n        params: {\n          asset: asset\n        }\n      });\n      return pool.data;\n    } catch (error) {\n      console.log({\n        error\n      });\n      throw new Error(\"Pool deatils not found\");\n    }\n  }\n\n  async getStakers() {\n    // const baseURL = await this.getBaseURL();\n    try {\n      const stakers = await axios(`${baseURL}/v1/stakers`);\n      return stakers.data;\n    } catch (err) {\n      throw new Error(\"Stakers not found\");\n    }\n  }\n\n  async getStakerData(data) {\n    // const baseURL = await this.getBaseURL();\n    try {\n      const stakerdata = await axios(`${baseURL}/v1/stakers/${data}`);\n      return stakerdata.data;\n    } catch (error) {\n      throw new Error(\"staker data not found\");\n    }\n  }\n\n  async getStakerPoolData(address, asset) {\n    // const baseURL = await this.getBaseURL();\n    try {\n      const stakerdata = await axios(`${baseURL}/v1/stakers/${address}/pools`, {\n        params: {\n          asset: asset\n        }\n      });\n      return stakerdata.data;\n    } catch (error) {\n      throw new Error(\"staker data not found\");\n    }\n  }\n\n  async getHistory(data) {\n    // const baseURL = await this.getBaseURL();\n    console.log(new Date(data.from).getTime());\n\n    try {\n      const history = await axios(`${baseURL}/v1/history/pools`, {\n        params: {\n          pool: data.pool,\n          interval: data.interval,\n          from: new Date(data.from).getTime(),\n          to: Date.now()\n        }\n      });\n      return history.data;\n    } catch (err) {\n      throw new Error(\"history not found\");\n    }\n  }\n\n  async getPoolEarningDetails(data) {\n    // const baseURL = await this.getBaseURL();\n    try {\n      const earning = await axios(`${baseURL}/v1/pools/details/${data}/earning`);\n      return earning.data;\n    } catch {\n      throw new Error(\"earning not found\");\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/rajan/Desktop/test-bepswap/src/service.ts"],"names":["crypto","Client","binanceClient","axios","keystore","asgardexBncClient","network","bncClient","getBncClient","console","log","privateKey","getPrivateKeyFromKeyStore","address","getAddressFromPrivateKey","getPrefix","setPrivateKey","account_number","chainId","getAssetFormat","symbol","getSwapMemo","addr","sliplimit","handleConfirmSwap","tokenAmountToSwap","response","confirmSwap","e","wallet","symbolFrom","symbolTo","amount","protectSlip","slipLimit","poolAddress","destAddr","Promise","resolve","reject","amountNumber","memo","transfer","then","catch","error","getStakeMemo","handleConfirmStake","stakeRequest","runeAmount","tokenAmount","StakeErrorMsg","params","runeAmountNumber","tokenAmountNumber","outputs","to","coins","denom","w","multiSend","getWithdrawMemo","percent","handleConfirmWithdraw","withdrawRate","Number","toFixed","withdrawRequest","result","Error","baseURL","MidgardService","gettxn","txid","offset","limit","txn","get","data","err","getAssetInfo","asset","getPools","pool","getPoolsDetails","getStakers","stakers","getStakerData","stakerdata","getStakerPoolData","getHistory","Date","from","getTime","history","interval","now","getPoolEarningDetails","earning"],"mappings":"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","sourcesContent":["import { crypto } from \"@binance-chain/javascript-sdk\";\nimport {\n  Client as binanceClient,\n  BinanceClient,\n} from \"@thorchain/asgardex-binance\";\n// import midgard from '@thorchain/asgardex-midgard';\nimport axios from \"axios\";\nconst keystore = `{\"version\":1,\"id\":\"6afe418d-78ba-42ee-b450-140ba636dca2\",\"crypto\":{\"ciphertext\":\"ec98f5971d6dfb7fd594725f0abd605b91f38c865dc07fdf0d099a4752ce0df5\",\"cipherparams\":{\"iv\":\"f78606ff8c9de4e1bc112b52c44594b1\"},\"cipher\":\"aes-256-ctr\",\"kdf\":\"pbkdf2\",\"kdfparams\":{\"dklen\":32,\"salt\":\"0effe86640154014ffb7eaa740cba2b07871b86367baf93c6ca81f1b4994e557\",\"c\":262144,\"prf\":\"hmac-sha256\"},\"mac\":\"89a4372999b14284ce7e98bf0a81063c154167cec6b05d6cf3a974b74abab972e622e71cc4a0038d369b9d65e67b9744396f9d85010ecdc1f6653112f5ee7d3a\"}}`;\n\nconst asgardexBncClient: BinanceClient = new binanceClient({\n  network: \"testnet\",\n});\n\nconst bncClient = asgardexBncClient.getBncClient();\nconsole.log(crypto);\n\nconst privateKey = crypto.getPrivateKeyFromKeyStore(keystore, \"thorchain\");\nconst address = crypto.getAddressFromPrivateKey(\n  privateKey,\n  asgardexBncClient.getPrefix()\n);\n\nbncClient.setPrivateKey(privateKey);\nbncClient.account_number = 29511;\nbncClient.chainId = \"Binance-Chain-Ganges\";\n\nconsole.log({ bncClient });\nconsole.log({ address, privateKey });\n\n//console.log(bncClient);\nconsole.log({ address, privateKey });\n\nconst getAssetFormat = (symbol) => {\n  return `BNB.${symbol}`;\n};\n\nexport const getSwapMemo = (symbol: string, addr: string, sliplimit = \"\") => {\n  return `SWAP:${getAssetFormat(symbol)}:${addr}:${sliplimit}`;\n};\n\nexport const handleConfirmSwap = async () => {\n  try {\n    console.log(\"came1\");\n    const tokenAmountToSwap = 10;\n    bncClient.account_number = 29511;\n    bncClient.chainId = \"Binance-Chain-Ganges\";\n    console.log({ bncClient });\n    let response = await confirmSwap(\n      bncClient,\n      address,\n      \"RUNE-67C\",\n      \"BTCB-101\",\n      tokenAmountToSwap,\n      true,\n      1032,\n      \"tbnb1s7j4hyh2jech3hf5znuk8jup7yejclj4y2ekgh\"\n    );\n    console.log(response);\n  } catch (e) {\n    console.log({ e });\n  }\n};\n\nexport const confirmSwap = (\n  bncClient,\n  wallet: string,\n  symbolFrom: string,\n  symbolTo: string,\n  amount,\n  protectSlip: boolean,\n  slipLimit,\n  poolAddress: string,\n  destAddr = \"\"\n) => {\n  return new Promise((resolve, reject) => {\n    const amountNumber = amount;\n\n    //const limit = protectSlip && slipLimit ? slipLimit.amount().toString() : '';\n    const memo = getSwapMemo(symbolTo, destAddr, slipLimit);\n\n    console.log({ wallet, poolAddress, amountNumber, symbolFrom, memo });\n    bncClient\n      .transfer(wallet, poolAddress, amountNumber, symbolFrom, memo)\n      .then((response) => resolve(response))\n      .catch((error: Error) => reject(error));\n  });\n};\n\n// handleConfirmSwap();\n\nexport const getStakeMemo = (symbol: string) => {\n  return `STAKE:${getAssetFormat(symbol)}`;\n};\n\nexport const handleConfirmStake = async () => {\n  try {\n    let response = await stakeRequest({\n      bncClient,\n      wallet: address,\n      runeAmount: 10, //runeAmountToSend,\n      tokenAmount: 27.25164472, //targetAmount,\n      poolAddress: \"tbnb1gag3mwutnzekj65m6s4hgqcdcc7f6qaf2rvxlc\",\n      symbolTo: \"AWC-31D\", //symbol,\n    });\n    console.log({ response });\n  } catch (e) {\n    console.log({ e });\n  }\n};\n\nenum StakeErrorMsg {\n  MISSING_SYMBOL = \"Missing asset to stake.\",\n  MISSING_POOL_ADDRESS = \"Missing Pool Address.\",\n  INVALID_TOKEN_AMOUNT = \"Invalid TOKEN amount.\",\n  INVALID_RUNE_AMOUNT = \"Invalid RUNE amount.\",\n}\n\nexport const stakeRequest = (\n  params //: StakeRequestParams,\n) => {\n  //}: Promise<TransferResult> => {\n  const {\n    bncClient,\n    wallet,\n    runeAmount,\n    tokenAmount,\n    poolAddress,\n    symbolTo,\n  } = params;\n\n  return new Promise((resolve, reject) => {\n    // We have to convert BNs back into numbers needed by Binance JS SDK\n    // However, we are safe here, since we have already checked amounts of rune and token before\n    const runeAmountNumber = runeAmount; //* 1E8 //runeAmountValue.toNumber();\n    const tokenAmountNumber = tokenAmount; //* 1E8 //tokenAmountValue.toNumber();\n    const memo = getStakeMemo(symbolTo);\n\n    if (runeAmount > 0 && tokenAmount > 0) {\n      //runeAmountValue.isGreaterThan(0) && tokenAmountValue.isGreaterThan(0)) {\n      const outputs = [\n        {\n          to: poolAddress,\n          coins: [\n            {\n              denom: \"RUNE-67C\", //RUNE_SYMBOL,\n              amount: runeAmountNumber,\n            },\n            {\n              denom: symbolTo,\n              amount: tokenAmountNumber,\n            },\n          ],\n        },\n      ];\n      console.log({ w: \"one\", wallet, outputs, memo });\n      console.log(outputs[0].coins);\n      bncClient\n        .multiSend(wallet, outputs, memo)\n        .then((response) => resolve(response))\n        .catch((error: Error) => {\n          console.log(error);\n          reject(error);\n        });\n    } else if (runeAmount <= 0 && tokenAmount) {\n      //runeAmountValue.isLessThanOrEqualTo(0) && tokenAmount) {\n      console.log({\n        w: \"two\",\n        wallet,\n        poolAddress,\n        tokenAmountNumber,\n        symbolTo,\n        memo,\n      });\n      bncClient\n        .transfer(wallet, poolAddress, tokenAmountNumber, symbolTo, memo)\n        .then((response) => resolve(response))\n        .catch((error: Error) => reject(error));\n    } else if (runeAmount && tokenAmount <= 0) {\n      //tokenAmountValue.isLessThanOrEqualTo(0)) {\n      console.log({\n        w: \"three\",\n        wallet,\n        poolAddress,\n        tokenAmountNumber,\n        symbolTo,\n        memo,\n      });\n      bncClient\n        .transfer(wallet, poolAddress, runeAmountNumber, \"RUNE-67C\", memo)\n        .then((response) => resolve(response))\n        .catch((error: Error) => reject(error));\n    }\n  });\n};\n\n//handleConfirmStake();\n\nexport const getWithdrawMemo = (symbol: string, percent: number) => {\n  return `WITHDRAW:${getAssetFormat(symbol)}:${percent}`;\n};\n\nconst handleConfirmWithdraw = async () => {\n  const withdrawRate = 4 / 100;\n\n  const percent = Number(Number(withdrawRate * 100).toFixed(0));\n  const response: any = await withdrawRequest({\n    bncClient,\n    wallet: address,\n    poolAddress: \"tbnb1ux38npsvajr8vjphqepvn0ynafjjssaj50ta6z\",\n    symbol: \"AWC-31D\",\n    percent,\n  });\n\n  console.log(\"xd: \", response, response?.result);\n};\n\ntype WithdrawParams = {\n  bncClient;\n  wallet: string;\n  poolAddress: string;\n  symbol: string;\n  percent: number;\n};\n\nconst withdrawRequest = (params: WithdrawParams) => {\n  const { bncClient, wallet, poolAddress, symbol, percent } = params;\n  return new Promise((resolve, reject) => {\n    if (!wallet) {\n      return reject(new Error(\"WithdrawErrorMsg.MISSING_WALLET\"));\n    }\n    if (!poolAddress) {\n      return reject(new Error(\"WithdrawErrorMsg.MISSING_POOL_ADDRESS\"));\n    }\n\n    const memo = getWithdrawMemo(symbol, percent * 100);\n\n    // Minimum amount to send memo on-chain\n    const amount = 0.00000001;\n    bncClient\n      .transfer(wallet, poolAddress, amount, \"RUNE-67C\", memo)\n      .then((response) => resolve(response))\n      // If first tx ^ fails (e.g. there is no RUNE available)\n      // another tx w/ same memo will be sent, but by using BNB now\n      .catch(() => {\n        bncClient\n          .transfer(wallet, poolAddress, amount, \"BNB\", memo)\n          .then((response) => resolve(response))\n          .catch((error: Error) => reject(error));\n      });\n  });\n};\n\n//  handleConfirmWithdraw();\nconst baseURL = \"http://138.68.125.107:8080\";\nexport class MidgardService {\n  //   private logger = new Logger();\n\n  // async getBaseURL(): Promise<string> {\n  //   try {\n  //     const baseURL = await midgard('chaosnet', false);\n  //     //   this.logger.log(baseURL);\n  //     return baseURL;\n  //   } catch (error) {\n  //     console.log({error});\n  //     throw new Error('Cannot fetch baseURL');\n  //   }\n  // }\n\n  async gettxn(txid: string, offset: string, limit: number): Promise<string> {\n    // const baseURL = await this.getBaseURL();\n    try {\n      const txn = await axios.get(`${baseURL}/v1/txs`, {\n        params: {\n          txid: txid,\n          offset: offset,\n          limit: limit,\n        },\n      });\n      return txn.data;\n    } catch (err) {\n      throw new Error(\"Error in axios request\");\n    }\n  }\n  async getAssetInfo(data: string): Promise<string> {\n    // const baseURL = await this.getBaseURL();\n    const asset = await axios.get(`${baseURL}/v1/assets`, {\n      params: {\n        asset: data,\n      },\n    });\n    try {\n      return asset.data;\n    } catch (err) {\n      throw new Error(\"Asset not fetched\");\n    }\n  }\n\n  async getPools(): Promise<string> {\n    console.log(\"came1\");\n    // const baseURL = await this.getBaseURL();\n\n    try {\n      const pool = await axios(`${baseURL}/v1/pools`);\n      return pool.data;\n    } catch (error) {\n      console.log({ error });\n      throw new Error(\"No Pools found\");\n    }\n  }\n\n  async getPoolsDetails(asset: string): Promise<string> {\n    // const baseURL = await this.getBaseURL();\n\n    try {\n      const pool = await axios(`${baseURL}/v1/pools/detail`, {\n        params: {\n          asset: asset,\n        },\n      });\n      return pool.data;\n    } catch (error) {\n      console.log({ error });\n      throw new Error(\"Pool deatils not found\");\n    }\n  }\n\n  async getStakers(): Promise<string> {\n    // const baseURL = await this.getBaseURL();\n\n    try {\n      const stakers = await axios(`${baseURL}/v1/stakers`);\n      return stakers.data;\n    } catch (err) {\n      throw new Error(\"Stakers not found\");\n    }\n  }\n\n  async getStakerData(data: string): Promise<string> {\n    // const baseURL = await this.getBaseURL();\n\n    try {\n      const stakerdata = await axios(`${baseURL}/v1/stakers/${data}`);\n      return stakerdata.data;\n    } catch (error) {\n      throw new Error(\"staker data not found\");\n    }\n  }\n\n  async getStakerPoolData(address: string, asset: string): Promise<string> {\n    // const baseURL = await this.getBaseURL();\n\n    try {\n      const stakerdata = await axios(`${baseURL}/v1/stakers/${address}/pools`, {\n        params: {\n          asset: asset,\n        },\n      });\n      return stakerdata.data;\n    } catch (error) {\n      throw new Error(\"staker data not found\");\n    }\n  }\n\n  async getHistory(data): Promise<string> {\n    // const baseURL = await this.getBaseURL();\n\n    console.log(new Date(data.from).getTime());\n\n    try {\n      const history = await axios(`${baseURL}/v1/history/pools`, {\n        params: {\n          pool: data.pool,\n          interval: data.interval,\n          from: new Date(data.from).getTime(),\n          to: Date.now(),\n        },\n      });\n      return history.data;\n    } catch (err) {\n      throw new Error(\"history not found\");\n    }\n  }\n\n  async getPoolEarningDetails(data: string): Promise<string> {\n    // const baseURL = await this.getBaseURL();\n    try {\n      const earning = await axios(\n        `${baseURL}/v1/pools/details/${data}/earning`\n      );\n      return earning.data;\n    } catch {\n      throw new Error(\"earning not found\");\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}